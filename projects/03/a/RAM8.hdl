// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
	// 这个芯片的构建思路一开始不是很明确，后来根据p44的图3.3，先构建了直接存储逻辑，然后不知道如何按照组合逻辑（读取逻辑）和时序逻辑（写逻辑）两种方式将直接存储逻辑和8个寄存器绑定起来，
	// 因为书上p50处的介绍读取的时候，将读取过程视为组合逻辑，写的过程看作组合逻辑，
	// 如果书上对读取的过程描述成load=0的时序逻辑思路会更清晰一点,和下面load=1的时序逻辑就统一起来，后面就进行了load=0 读取逻辑的尝试。
	DMux8Way(in = load, sel = address, a = load0, b = load1, c = load2, d = load3, e = load4, f = load5, g = load6, h = load7);
	Register(in = in , load = load0, out = r0);
	Register(in = in , load = load1, out = r1);
	Register(in = in , load = load2, out = r2);
	Register(in = in , load = load3, out = r3);
	Register(in = in , load = load4, out = r4);
	Register(in = in , load = load5, out = r5);
	Register(in = in , load = load6, out = r6);
	Register(in = in , load = load7, out = r7);
	Mux8Way16(a = r0, b = r1, c = r2, d = r3, e = r4, f = r5, g = r6, h = r7, sel = address, out = out);
}