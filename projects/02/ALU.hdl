// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	   // Put you code here:
	   // deal with zx and nx
	   And16(a = x, b[0..15] = false, out = zeroX);
	   Mux16(a = x, b =zeroX , sel = zx, out = zxOut);
	   Not16(in = zxOut, out = notZxOut);
	   Mux16(a = zxOut, b =notZxOut , sel = nx, out = nxOut);
	   
	   // deal with zy and ny
	   And16(a = y, b[0..15] = false, out = zeroY);
	   Mux16(a = y, b =zeroY , sel = zy, out = zyOut);
	   Not16(in = zyOut, out = notZyOut);
	   Mux16(a = zyOut, b =notZyOut , sel = ny, out = nyOut);
	   
	   // deal with f and no
	   Add16(a = nxOut, b = nyOut, out = xAddY);
	   And16(a = nxOut, b = nyOut, out = xAndY); 
	   Mux16(a = xAndY, b = xAddY, sel = f, out = fOut);
	   
	   // out
	   Not16(in = fOut, out = notFOut);
	   Mux16(a = fOut , b = notFOut, sel = no, out = fOut2); 
	   
	   //ng
	   //And(a = fOut2[15], b = true, out = ng); //这种写法会报错：fOut2[15]: sub bus of an internal node may not be used
	   IsNeg16(in = fOut2, out = ng);
	   
	   //zr
	   //Or8Way(in = fOut2[0..7], out = outOr0to7);  //这种写法也会报错：sub bus of an internal node may not be used
	   //Or8Way(in = fOut2[8..15], out = outOr8to15);
	   //Or(a = outOr0to7, b = outOr8to15, out = outOr0to15);
	   Or16Way(in = fOut2, out = outOr0to15);
	   Mux(a = true, b = false, sel = outOr0to15, out = zr);
	  
	   And16(a = fOut2,b[0..15] = true, out = out);
	   
}
